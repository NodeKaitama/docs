{
  "openapi": "3.0.1",
  "info": {
    "title": "Sentio Agent API",
    "description": "API for managing and interacting with Sentio's on-chain AI agents",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api.sentio.ai"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/agents": {
      "get": {
        "description": "Returns all agents that the authenticated user has access to",
        "parameters": [
          {
            "name": "limit",
            "in": "query", 
            "description": "Maximum number of agents to return",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of agents",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Agent"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "description": "Creates a new agent",
        "requestBody": {
          "description": "Agent configuration to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewAgent" 
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Agent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Agent"
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/agents/{id}": {
      "delete": {
        "description": "Deletes an agent by ID",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of agent to delete",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Agent deleted successfully",
            "content": {}
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Agent": {
        "required": [
          "name",
          "type"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Name of the agent",
            "type": "string"
          },
          "type": {
            "description": "Type of agent (e.g. DeFi, NFT, Social)",
            "type": "string"
          },
          "description": {
            "description": "Detailed description of the agent's purpose",
            "type": "string"
          },
          "networks": {
            "description": "Blockchain networks the agent operates on",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "triggers": {
            "description": "Conditions that activate the agent",
            "type": "array",
            "items": {
              "type": "object"
            }
          },
          "actions": {
            "description": "Actions the agent can perform",
            "type": "array",
            "items": {
              "type": "object"
            }
          }
        }
      },
      "NewAgent": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Agent"
          },
          {
            "required": [
              "id"
            ],
            "type": "object",
            "properties": {
              "id": {
                "description": "Unique identifier for the agent",
                "type": "integer",
                "format": "int64"
              }
            }
          }
        ]
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}